FROM nvidia/cuda:11.0.3-base-ubuntu20.04

# ==================================================================
# Ubuntu Setup
# (If some of these are unecessary - migrate to dev)
# ------------------------------------------------------------------
RUN \
    apt-get update -y && apt-get upgrade -y \
    && apt-get install -y \
    software-properties-common \
    apt-utils \
    ssh \
    && \
    APT_INSTALL="apt-get install -y --no-install-recommends" && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
    # TERMINAL TOOLS
    sudo \
    nano \
    tmux \
    # BUILD TOOLS
    build-essential \
    ca-certificates \
    # DOWNLOAD TOOLS
    curl \
    wget \
    unzip \
    # COMPILERS
    g++ \
    cmake \
    # VERSION CONTROL
    git \
    # NETWORK TOOLS
    iputils-ping \
    net-tools \
    ffmpeg \
    # ==================================================================
    # Setup Python3.8 with pip
    # ------------------------------------------------------------------
    && APT_INSTALL="apt-get install -y --no-install-recommends" \
    && add-apt-repository -y ppa:deadsnakes/ppa \
    && apt-get update -y && apt-get upgrade -y \
    && apt-get install -y \
    && DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
    python3.8 \
    python3.8-distutils \
    python3.8-dev \
    python3-pip \
    python3-yaml \
    && python3.8 -m pip install --upgrade pip wheel \
    && python3.8 -m pip install setuptools \
    && python3.8 -m pip install --ignore-installed pyyaml \
    && ln -s /usr/bin/python3.8 /usr/local/bin/python \
    && ln -s /usr/bin/python3.8 /usr/local/bin/python3 \
    # ==================================================================
    # Install ros/catkin packages
    # ------------------------------------------------------------------
    && PIP_INSTALL="python3 -m pip --no-cache-dir install --upgrade" && \
    $PIP_INSTALL \
    # DEPENDENCIES
    numpy \
    scipy \
    matplotlib \
    chatllama-py \
    #ipython \
    #jupyter \
    #pandas \
    #sympy \
    #nose \
    #scikit-learn \
    && rm -rf /var/lib/apt/lists/* 

#ENV MINICONDA_INSTALLER_SCRIPT Miniconda3-4.5.4-Linux-x86_64.sh
#ENV MINICONDA_PREFIX /usr/local
#RUN wget https://repo.continuum.io/miniconda/$MINICONDA_INSTALLER_SCRIPT
#RUN chmod +x $MINICONDA_INSTALLER_SCRIPT
#RUN ./$MINICONDA_INSTALLER_SCRIPT -b -f -p $MINICONDA_PREFIX
#RUN conda update -n base conda
#RUN conda install pytorch pytorch-gpu torchvision torchaudio -c pytorch
#RUN pip3 install torch==1.10.0+cu113 torchvision==0.11.1+cu113 torchaudio==0.10.0+cu113 -f https://download.pytorch.org/whl/cu113/torch_stable.html

#RUN conda install pytorch-gpu


WORKDIR /root/
RUN mkdir multimodal_autoencoder_ws
WORKDIR /root/multimodal_autoencoder_ws/
# Install software 

# Clone the conf files into the docker container
RUN git clone https://github.com/micolspitale93/MultimodalAutoencoderRL.git


WORKDIR /root/multimodal_autoencoder_ws/
# Install software 

# Clone the conf files into the docker container
RUN git clone https://github.com/facebookresearch/llama.git
WORKDIR /root/multimodal_autoencoder_ws/llama/
RUN pip install -r requirements.txt
RUN pip install -e .
#WORKDIR /root/datadriven_ws/Data-driven-Robot-Coach-in-BSFT/
#RUN mkdir checkpoints

# ==================================================================
# Cmake Setup
# (only needed for armv7 due to cmake bug with qemu. Future cmake >= 3.19
# may fix this without source rebuild once its available on the ubuntu repo.)
# See: https://gitlab.kitware.com/cmake/cmake/-/issues/20568
# ------------------------------------------------------------------
RUN ARCH= && dpkgArch="$(dpkg --print-architecture)" \
    && case "${dpkgArch##*-}" in \
    amd64) ARCH='x64';; \
    arm64) ARCH='arm64';; \
    armhf) ARCH='armv7';; \
    i386) ARCH='x86';; \
    *) echo "unsupported architecture"; exit 1 ;; \
    esac; \
    \
    if [ "$ARCH" = 'armv7' ]; then \
        export CFLAGS="-D_FILE_OFFSET_BITS=64"; \
        export CXXFLAGS="-D_FILE_OFFSET_BITS=64"; \
        version=3.18; \
        build=4; \
        cd '/tmp'; \
        wget https://cmake.org/files/v$version/cmake-$version.$build.tar.gz; \
        tar -xzf cmake-$version.$build.tar.gz; \
        cd cmake-$version.$build/; \
        ./bootstrap; \
        make -j$(nproc); \
        make install; \
        cd ../; \
        rm -r cmake-$version.$build.tar.gz cmake-$version.$build; \
        cmake --version; \
    fi;

#RUN mkdir -p /root/local_mount/ \
#    && ln -vs /root/datadriven_ws/Data-driven-Robot-Coach-in-BSFT/ /root/local_mount/

#RUN pip install -f https://download.pytorch.org/whl/torch_stable.html torch==1.4.0+cu92
RUN mkdir -p /root/local_mount/ \
    && ln -vs /root/multimodal_autoencoder_ws/MultimodalAutoencoderRL/ /root/local_mount/ 
WORKDIR /root/multimodal_autoencoder_ws/MultimodalAutoencoderRL/

# dependencied for Facial Generation
#RUN conda install pytorch-gpu
#RUN pip uninstall torchvision
#RUN pip install torchvision==0.4.0 -f https://download.pytorch.org/whl/torch_stable.html
#RUN pip install -r requirements.txt
# ==================================================================
# For convenience add a source script to bashrc and update without clearing
# ------------------------------------------------------------------
RUN \
    echo 'source /setup_script.sh' >> /root/.bashrc \
    && apt-get update -y && apt-get upgrade -y

#RUN mkdir /root/datadriven_ws/Code-for-facial-generation
#COPY Code-for-facial-generation /root/datadriven_ws/Code-for-facial-generation

#RUN mkdir -p /root/local_mount/ \
#    && ln -vs /root/datadriven_ws/Code-for-facial-generation/ /root/local_mount/

# setup entrypoint and bash setup script
COPY ./dockerfiles/config/entry_point.sh /
COPY ./dockerfiles/config/setup_script.sh /



#ENTRYPOINT ["/entry_point.sh"]
CMD ["bash"]

